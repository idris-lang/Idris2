 1/10: Building AppendVec (AppendVec.idr)
Warning: We are about to implicitly bind the following lowercase names.
You may be unintentionally shadowing the associated global definitions:
  elem is shadowing Prelude.Types.elem

AppendVec:4:1--4:11
 1 | import Data.Nat
 2 | import Data.Vect
 3 | 
 4 | append_nil : Vect m elem -> Vect (plus m 0) elem
     ^^^^^^^^^^

Warning: We are about to implicitly bind the following lowercase names.
You may be unintentionally shadowing the associated global definitions:
  elem is shadowing Prelude.Types.elem

AppendVec:7:1--7:10
 3 | 
 4 | append_nil : Vect m elem -> Vect (plus m 0) elem
 5 | append_nil {m} xs = rewrite plusZeroRightNeutral m in xs
 6 | 
 7 | append_xs : Vect (S (m + k)) elem -> Vect (plus m (S k)) elem
     ^^^^^^^^^

Warning: We are about to implicitly bind the following lowercase names.
You may be unintentionally shadowing the associated global definitions:
  elem is shadowing Prelude.Types.elem

AppendVec:10:1--10:7
 06 | 
 07 | append_xs : Vect (S (m + k)) elem -> Vect (plus m (S k)) elem
 08 | append_xs {m} {k} xs = rewrite sym (plusSuccRightSucc m k) in xs
 09 | 
 10 | append : Vect n elem -> Vect m elem -> Vect (m + n) elem
      ^^^^^^

 2/10: Building CheckEqDec (CheckEqDec.idr)
 3/10: Building CheckEqMaybe (CheckEqMaybe.idr)
 4/10: Building EqNat (EqNat.idr)
 5/10: Building ExactLength (ExactLength.idr)
 6/10: Building ExactLengthDec (ExactLengthDec.idr)
 7/10: Building ReverseVec (ReverseVec.idr)
 8/10: Building TCVects (TCVects.idr)
 9/10: Building Void (Void.idr)
10/10: Building All (All.idr)
