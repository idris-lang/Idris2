1/8: Building IsEven (IsEven.idr)
2/8: Building Matrix (Matrix.idr)
Warning: We are about to implicitly bind the following lowercase names.
You may be unintentionally shadowing the associated global definitions:
  elem is shadowing Data.Vect.elem, Prelude.Types.elem

Matrix:3:1--3:14
 1 | import Data.Vect
 2 | 
 3 | createEmpties : {n : _} -> Vect n (Vect 0 elem)
     ^^^^^^^^^^^^^

Warning: We are about to implicitly bind the following lowercase names.
You may be unintentionally shadowing the associated global definitions:
  elem is shadowing Data.Vect.elem, Prelude.Types.elem

Matrix:7:1--7:16
 3 | createEmpties : {n : _} -> Vect n (Vect 0 elem)
 4 | createEmpties {n = Z} = []
 5 | createEmpties {n = (S k)} = [] :: createEmpties
 6 | 
 7 | transposeHelper : (x : Vect n elem) -> (xs_trans : Vect n (Vect k elem)) -> Vect n (Vect (S k) elem)
     ^^^^^^^^^^^^^^^

Warning: We are about to implicitly bind the following lowercase names.
You may be unintentionally shadowing the associated global definitions:
  elem is shadowing Data.Vect.elem, Prelude.Types.elem

Matrix:11:1--11:13
 07 | transposeHelper : (x : Vect n elem) -> (xs_trans : Vect n (Vect k elem)) -> Vect n (Vect (S k) elem)
 08 | transposeHelper [] [] = []
 09 | transposeHelper (x :: xs) (y :: ys) = (x :: y) :: transposeHelper xs ys
 10 | 
 11 | transposeMat : {n : _} -> Vect m (Vect n elem) -> Vect n (Vect m elem)
      ^^^^^^^^^^^^

3/8: Building VecSort (VecSort.idr)
Warning: We are about to implicitly bind the following lowercase names.
You may be unintentionally shadowing the associated global definitions:
  elem is shadowing Data.Vect.elem, Prelude.Types.elem

VecSort:3:1--3:7
 1 | import Data.Vect
 2 | 
 3 | insert : Ord elem => (x : elem) -> (xsSorted : Vect k elem) -> Vect (S k) elem
     ^^^^^^

Warning: We are about to implicitly bind the following lowercase names.
You may be unintentionally shadowing the associated global definitions:
  elem is shadowing Data.Vect.elem, Prelude.Types.elem

VecSort:9:1--9:8
 5 | insert x (y :: xs) = case x < y of
 6 |                           False => y :: insert x xs
 7 |                           True => x :: y :: xs
 8 | 
 9 | insSort : Ord elem => Vect n elem -> Vect n elem
     ^^^^^^^

4/8: Building Vectors (Vectors.idr)
5/8: Building WordLength (WordLength.idr)
6/8: Building WordLength_vec (WordLength_vec.idr)
7/8: Building XOR (XOR.idr)
8/8: Building All (All.idr)
