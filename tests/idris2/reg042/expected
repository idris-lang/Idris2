1/1: Building NatOpts (NatOpts.idr)
Main> Main.doPlus
Arguments [{arg:0}, {arg:1}]
Compile time tree: plus {arg:0} {arg:1}
Compiled: \ {arg:0}, {arg:1} => {arg:0} + {arg:1}
Refers to: Prelude.Types.plus
Flags: covering
Size change: Prelude.Types.plus: [Just (0, Same), Just (1, Same)]
Main> Main.doMinus
Arguments [{arg:0}, {arg:1}]
Compile time tree: minus {arg:0} {arg:1}
Compiled: \ {arg:0}, {arg:1} => Prelude.Types.prim__integerToNat ({arg:0} - {arg:1})
Refers to: Prelude.Types.minus
Refers to (runtime): Prelude.Types.prim__integerToNat
Flags: covering
Size change: Prelude.Types.minus: [Just (0, Same), Just (1, Same)]
Main> Main.doMult
Arguments [{arg:0}, {arg:1}]
Compile time tree: mult {arg:0} {arg:1}
Compiled: \ {arg:0}, {arg:1} => {arg:0} * {arg:1}
Refers to: Prelude.Types.mult
Flags: covering
Size change: Prelude.Types.mult: [Just (0, Same), Just (1, Same)]
Main> Main.doCompare
Arguments [{arg:0}, {arg:1}]
Compile time tree: compareNat {arg:0} {arg:1}
Compiled: \ {arg:0}, {arg:1} => Prelude.EqOrd.compare {arg:0} {arg:1}
Refers to: Prelude.Types.compareNat
Refers to (runtime): Prelude.EqOrd.compare
Flags: covering
Size change: Prelude.Types.compareNat: [Just (0, Same), Just (1, Same)]
Main> Main.doEqual
Arguments [{arg:0}, {arg:1}]
Compile time tree: equalNat {arg:0} {arg:1}
Compiled: \ {arg:0}, {arg:1} => {arg:0} == {arg:1}
Refers to: Prelude.Types.equalNat
Flags: covering
Size change: Prelude.Types.equalNat: [Just (0, Same), Just (1, Same)]
Main> Bye for now!
