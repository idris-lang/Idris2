1/1: Building NatOpts (NatOpts.idr)
Main> Main.doPlus
Arguments [{arg:1}, {arg:2}]
Compile time tree: plus {arg:1} {arg:2}
Compiled: \ {arg:1}, {arg:2} => {arg:1} + {arg:2}
Refers to: Prelude.Types.plus
Flags: covering
Size change:
  Prelude.Types.plus:
    l 0 1
  r +----
  0 | =
  1 |   =
Main> Main.doMinus
Arguments [{arg:1}, {arg:2}]
Compile time tree: minus {arg:1} {arg:2}
Compiled: \ {arg:1}, {arg:2} => Prelude.Types.prim__integerToNat ({arg:1} - {arg:2})
Refers to: Prelude.Types.minus
Refers to (runtime): Prelude.Types.prim__integerToNat
Flags: covering
Size change:
  Prelude.Types.minus:
    l 0 1
  r +----
  0 | =
  1 |   =
Main> Main.doMult
Arguments [{arg:1}, {arg:2}]
Compile time tree: mult {arg:1} {arg:2}
Compiled: \ {arg:1}, {arg:2} => {arg:1} * {arg:2}
Refers to: Prelude.Types.mult
Flags: covering
Size change:
  Prelude.Types.mult:
    l 0 1
  r +----
  0 | =
  1 |   =
Main> Main.doCompare
Arguments [{arg:1}, {arg:2}]
Compile time tree: compareNat {arg:1} {arg:2}
Compiled: \ {arg:1}, {arg:2} => Prelude.EqOrd.compare {arg:1} {arg:2}
Refers to: Prelude.Types.compareNat
Refers to (runtime): Prelude.EqOrd.compare
Flags: covering
Size change:
  Prelude.Types.compareNat:
    l 0 1
  r +----
  0 | =
  1 |   =
Main> Main.doEqual
Arguments [{arg:1}, {arg:2}]
Compile time tree: equalNat {arg:1} {arg:2}
Compiled: \ {arg:1}, {arg:2} => {arg:1} == {arg:2}
Refers to: Prelude.Types.equalNat
Flags: covering
Size change:
  Prelude.Types.equalNat:
    l 0 1
  r +----
  0 | =
  1 |   =
Main> Bye for now!
