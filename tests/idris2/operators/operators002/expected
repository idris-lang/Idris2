1/1: Building Errors (Errors.idr)
Error: Operator =@ is a type-binding (typebind) operator, but is used as an automatically-binding (autobind) operator.

Errors:8:19--8:21
 4 | 0 (=@) : (a : Type) -> (a -> Type) -> Type
 5 | (=@) a f = (1 x : a) -> f x
 6 | 
 7 | data S : {ty : Type} -> (x : ty) -> Type where
 8 |   MkS : (x := ty) =@ S x
                       ^^
Explanation: regular, typebind and autobind operators all use a slightly different syntax, typebind looks like this: '(name : type) =@ expr', autobind looks like this: '(name := expr) =@ expr'.

Possible solutions:
 - Write the expression using typebind syntax: '(x : ty) =@ S x'.
 - Change the fixity defined at Errors:2:10--2:21 to 'export autobind infixr 0 =@'.
 - Hide or remove the fixity at Errors:2:10--2:21 and import a module that exports a compatible fixity.
1/1: Building Errors2 (Errors2.idr)
Error: Operator =@ is an automatically-binding (autobind) operator, but is used as a regular operator.

Errors2:7:29--7:31
 3 | 
 4 | 0 (=@) : (a : Type) -> (a -> Type) -> Type
 5 | (=@) a f = (1 x : a) -> f x
 6 | 
 7 | wrongId : {0 a : Type} -> a =@ a
                                 ^^
Explanation: regular, typebind and autobind operators all use a slightly different syntax, typebind looks like this: '(name : type) =@ expr', autobind looks like this: '(name := expr) =@ expr'.

Possible solutions:
 - Write the expression using autobind syntax: '(_ := a) =@ a'.
 - Change the fixity defined at Errors2:2:10--2:21 to 'export infixr 0 =@'.
 - Hide or remove the fixity at Errors2:2:10--2:21 and import a module that exports a compatible fixity.
1/1: Building Errors3 (Errors3.idr)
Error: Operator =@ is a type-binding (typebind) operator, but is used as a regular operator.

Errors3:7:29--7:31
 3 | 
 4 | 0 (=@) : (a : Type) -> (a -> Type) -> Type
 5 | (=@) a f = (1 x : a) -> f x
 6 | 
 7 | wrongId : {0 a : Type} -> a =@ a
                                 ^^
Explanation: regular, typebind and autobind operators all use a slightly different syntax, typebind looks like this: '(name : type) =@ expr', autobind looks like this: '(name := expr) =@ expr'.

Possible solutions:
 - Write the expression using typebind syntax: '(_ : a) =@ a'.
 - Change the fixity defined at Errors3:2:10--2:21 to 'export infixr 0 =@'.
 - Hide or remove the fixity at Errors3:2:10--2:21 and import a module that exports a compatible fixity.
1/1: Building Errors4 (Errors4.idr)
Error: Operator =@ is a regular operator, but is used as a type-binding (typebind) operator.

Errors4:9:18--9:20
 5 | (=@) a f = (1 x : a) -> f x
 6 | 
 7 | 
 8 | data S : {ty : Type} -> (x : ty) -> Type where
 9 |   MkS : (x : ty) =@ S x
                      ^^
Explanation: regular, typebind and autobind operators all use a slightly different syntax, typebind looks like this: '(name : type) =@ expr', autobind looks like this: '(name := expr) =@ expr'.

Possible solutions:
 - Write the expression using regular syntax: 'ty =@ S x'.
 - Change the fixity defined at Errors4:2:1--2:12 to 'export typebind infixr 0 =@'.
 - Hide or remove the fixity at Errors4:2:1--2:12 and import a module that exports a compatible fixity.
1/1: Building Errors5 (Errors5.idr)
Error: Operator =@ is a regular operator, but is used as an automatically-binding (autobind) operator.

Errors5:10:19--10:21
 06 | (=@) a f = (1 x : a) -> f x
 07 | 
 08 | 
 09 | data S : {ty : Type} -> (x : ty) -> Type where
 10 |   MkS : (x := ty) =@ S x
                        ^^
Explanation: regular, typebind and autobind operators all use a slightly different syntax, typebind looks like this: '(name : type) =@ expr', autobind looks like this: '(name := expr) =@ expr'.

Possible solutions:
 - Write the expression using regular syntax: 'ty =@ S x'.
 - Change the fixity defined at Errors5:3:1--3:12 to 'export autobind infixr 0 =@'.
 - Hide or remove the fixity at Errors5:3:1--3:12 and import a module that exports a compatible fixity.
