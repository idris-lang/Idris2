1/1: Building IEdit (IEdit.lidr)
Main> > my_cong x x Refl = Refl
Main> > my_curry f x y = f (x, y)
Main> > my_uncurry f x = f (fst x) (snd x)
Main> > append [] ys = ys
> append (x :: xs) ys = x :: append xs ys
Main> > lappend [] ys = ys
> lappend (x :: xs) ys = lappend ys (x :: xs)
Main> > zipWith f [] [] = []
> zipWith f (x :: xs) (y :: ys) = f x y :: zipWith f xs ys
Main> > lookup Here (ECons x es) = x
> lookup (There p) (ECons x es) = lookup p es
Main> Main.my_uncurry : (a -> b -> c) -> (a, b) -> c
Main> Bye for now!
